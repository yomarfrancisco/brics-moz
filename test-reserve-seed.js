import mongoose from "mongoose"; import dotenv from "dotenv"; dotenv.config(); const MONGODB_URI = process.env.MONGODB_URI; if (!MONGODB_URI) { console.error("❌ MONGODB_URI is not defined"); process.exit(1); } const reserveLedgerSchema = new mongoose.Schema({ totalReserve: { type: Number, required: true, min: 0, default: 0 }, chainId: { type: Number, required: true, index: true, unique: true }, lastUpdated: { type: Date, default: Date.now }, notes: { type: String, default: "" }, }, { timestamps: { createdAt: "createdAt", updatedAt: "updatedAt" }, }); const ReserveLedger = mongoose.model("ReserveLedger", reserveLedgerSchema); async function testReserveLedger() { try { console.log("🔍 Testing reserve ledger connection..."); console.log("MongoDB URI:", MONGODB_URI.replace(/:([^@]+)@/, ":****@")); await mongoose.connect(MONGODB_URI, { ssl: true, retryWrites: true, w: "majority", appName: "reserve-ledger-test", maxPoolSize: 5, serverSelectionTimeoutMS: 5000, socketTimeoutMS: 20000, }); console.log("✅ MongoDB connected successfully"); const existingLedgers = await ReserveLedger.find({}).lean(); console.log(`📊 Found ${existingLedgers.length} existing reserve ledgers`); if (existingLedgers.length > 0) { console.log("📋 Existing ledgers:"); existingLedgers.forEach(ledger => { console.log(`  - Chain ${ledger.chainId}: ${ledger.totalReserve} USDT`); }); } else { console.log("❌ No reserve ledgers found - this explains the error!"); } } catch (error) { console.error("❌ Test failed:", error); } finally { await mongoose.connection.close(); console.log("🔌 MongoDB connection closed"); } } testReserveLedger();
